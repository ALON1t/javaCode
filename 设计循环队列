class MyCircularQueue {

    private final int[] array;
    private int size;
    private int frontIndex;
    private int rearIndex;

    //循环队列的数组容量是k
    public MyCircularQueue(int k) {
        array = new int[k];

        size = 0;
        frontIndex = 0;
        rearIndex = 0;
    }

    //把value插入循环队列尾部
    //成功返回true  失败（容量满了）返回false
    public boolean enQueue(int value) {
        if(size == array.length) {
            return false;
        }
        array[rearIndex] = value;
        size++;
        rearIndex++;
        if (rearIndex == array.length) {
            rearIndex = 0;
        }
        return true;
    }

    public boolean deQueue() {
        //从循环队列队首删除一个元素
        //成功返true  失败（队列为空）返回false
        if(size == 0) {
            return false;
        }
        size--;
        frontIndex++;
        if(frontIndex == array.length) {
            frontIndex = 0;
        }
        return  true;
    }

    //返回队首元素
    //队列为空返回-1
    public int Front() {
        if(size == 0) {
            return  -1;
        }
        return array[frontIndex];
    }

    //返回队尾元素
    //队列为空返回-1
    public int Rear() {
        if(size == 0) {
            return -1;
        }
        if(rearIndex == 0) {
            return array[array.length - 1];
        } else
            return array[rearIndex - 1];

    }

    public boolean isEmpty() {

        return size == 0;
    }

    public boolean isFull() {
        return size == array.length;
    }
}

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue obj = new MyCircularQueue(k);
 * boolean param_1 = obj.enQueue(value);
 * boolean param_2 = obj.deQueue();
 * int param_3 = obj.Front();
 * int param_4 = obj.Rear();
 * boolean param_5 = obj.isEmpty();
 * boolean param_6 = obj.isFull();
 */
